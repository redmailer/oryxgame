// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageStruct.proto

#ifndef PROTOBUF_INCLUDED_messageStruct_2eproto
#define PROTOBUF_INCLUDED_messageStruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messageStruct_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_messageStruct_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_messageStruct_2eproto();
namespace Proto {
class stHeartBeat_C;
class stHeartBeat_CDefaultTypeInternal;
extern stHeartBeat_CDefaultTypeInternal _stHeartBeat_C_default_instance_;
class stHeartBeat_S;
class stHeartBeat_SDefaultTypeInternal;
extern stHeartBeat_SDefaultTypeInternal _stHeartBeat_S_default_instance_;
class stLogin_C;
class stLogin_CDefaultTypeInternal;
extern stLogin_CDefaultTypeInternal _stLogin_C_default_instance_;
class stLogin_S;
class stLogin_SDefaultTypeInternal;
extern stLogin_SDefaultTypeInternal _stLogin_S_default_instance_;
}  // namespace Proto
namespace google {
namespace protobuf {
template<> ::Proto::stHeartBeat_C* Arena::CreateMaybeMessage<::Proto::stHeartBeat_C>(Arena*);
template<> ::Proto::stHeartBeat_S* Arena::CreateMaybeMessage<::Proto::stHeartBeat_S>(Arena*);
template<> ::Proto::stLogin_C* Arena::CreateMaybeMessage<::Proto::stLogin_C>(Arena*);
template<> ::Proto::stLogin_S* Arena::CreateMaybeMessage<::Proto::stLogin_S>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Proto {

// ===================================================================

class stHeartBeat_C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.stHeartBeat_C) */ {
 public:
  stHeartBeat_C();
  virtual ~stHeartBeat_C();

  stHeartBeat_C(const stHeartBeat_C& from);

  inline stHeartBeat_C& operator=(const stHeartBeat_C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  stHeartBeat_C(stHeartBeat_C&& from) noexcept
    : stHeartBeat_C() {
    *this = ::std::move(from);
  }

  inline stHeartBeat_C& operator=(stHeartBeat_C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const stHeartBeat_C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stHeartBeat_C* internal_default_instance() {
    return reinterpret_cast<const stHeartBeat_C*>(
               &_stHeartBeat_C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(stHeartBeat_C* other);
  friend void swap(stHeartBeat_C& a, stHeartBeat_C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline stHeartBeat_C* New() const final {
    return CreateMaybeMessage<stHeartBeat_C>(NULL);
  }

  stHeartBeat_C* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<stHeartBeat_C>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const stHeartBeat_C& from);
  void MergeFrom(const stHeartBeat_C& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stHeartBeat_C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 timenow = 1;
  void clear_timenow();
  static const int kTimenowFieldNumber = 1;
  ::google::protobuf::int32 timenow() const;
  void set_timenow(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.stHeartBeat_C)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 timenow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messageStruct_2eproto;
};
// -------------------------------------------------------------------

class stHeartBeat_S : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.stHeartBeat_S) */ {
 public:
  stHeartBeat_S();
  virtual ~stHeartBeat_S();

  stHeartBeat_S(const stHeartBeat_S& from);

  inline stHeartBeat_S& operator=(const stHeartBeat_S& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  stHeartBeat_S(stHeartBeat_S&& from) noexcept
    : stHeartBeat_S() {
    *this = ::std::move(from);
  }

  inline stHeartBeat_S& operator=(stHeartBeat_S&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const stHeartBeat_S& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stHeartBeat_S* internal_default_instance() {
    return reinterpret_cast<const stHeartBeat_S*>(
               &_stHeartBeat_S_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(stHeartBeat_S* other);
  friend void swap(stHeartBeat_S& a, stHeartBeat_S& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline stHeartBeat_S* New() const final {
    return CreateMaybeMessage<stHeartBeat_S>(NULL);
  }

  stHeartBeat_S* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<stHeartBeat_S>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const stHeartBeat_S& from);
  void MergeFrom(const stHeartBeat_S& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stHeartBeat_S* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 timenow = 1;
  void clear_timenow();
  static const int kTimenowFieldNumber = 1;
  ::google::protobuf::int32 timenow() const;
  void set_timenow(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.stHeartBeat_S)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 timenow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messageStruct_2eproto;
};
// -------------------------------------------------------------------

class stLogin_C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.stLogin_C) */ {
 public:
  stLogin_C();
  virtual ~stLogin_C();

  stLogin_C(const stLogin_C& from);

  inline stLogin_C& operator=(const stLogin_C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  stLogin_C(stLogin_C&& from) noexcept
    : stLogin_C() {
    *this = ::std::move(from);
  }

  inline stLogin_C& operator=(stLogin_C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const stLogin_C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stLogin_C* internal_default_instance() {
    return reinterpret_cast<const stLogin_C*>(
               &_stLogin_C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(stLogin_C* other);
  friend void swap(stLogin_C& a, stLogin_C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline stLogin_C* New() const final {
    return CreateMaybeMessage<stLogin_C>(NULL);
  }

  stLogin_C* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<stLogin_C>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const stLogin_C& from);
  void MergeFrom(const stLogin_C& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stLogin_C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:Proto.stLogin_C)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messageStruct_2eproto;
};
// -------------------------------------------------------------------

class stLogin_S : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.stLogin_S) */ {
 public:
  stLogin_S();
  virtual ~stLogin_S();

  stLogin_S(const stLogin_S& from);

  inline stLogin_S& operator=(const stLogin_S& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  stLogin_S(stLogin_S&& from) noexcept
    : stLogin_S() {
    *this = ::std::move(from);
  }

  inline stLogin_S& operator=(stLogin_S&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const stLogin_S& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stLogin_S* internal_default_instance() {
    return reinterpret_cast<const stLogin_S*>(
               &_stLogin_S_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(stLogin_S* other);
  friend void swap(stLogin_S& a, stLogin_S& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline stLogin_S* New() const final {
    return CreateMaybeMessage<stLogin_S>(NULL);
  }

  stLogin_S* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<stLogin_S>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const stLogin_S& from);
  void MergeFrom(const stLogin_S& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stLogin_S* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 player_id = 1;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int64 player_id() const;
  void set_player_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.stLogin_S)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messageStruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// stHeartBeat_C

// int32 timenow = 1;
inline void stHeartBeat_C::clear_timenow() {
  timenow_ = 0;
}
inline ::google::protobuf::int32 stHeartBeat_C::timenow() const {
  // @@protoc_insertion_point(field_get:Proto.stHeartBeat_C.timenow)
  return timenow_;
}
inline void stHeartBeat_C::set_timenow(::google::protobuf::int32 value) {
  
  timenow_ = value;
  // @@protoc_insertion_point(field_set:Proto.stHeartBeat_C.timenow)
}

// -------------------------------------------------------------------

// stHeartBeat_S

// int32 timenow = 1;
inline void stHeartBeat_S::clear_timenow() {
  timenow_ = 0;
}
inline ::google::protobuf::int32 stHeartBeat_S::timenow() const {
  // @@protoc_insertion_point(field_get:Proto.stHeartBeat_S.timenow)
  return timenow_;
}
inline void stHeartBeat_S::set_timenow(::google::protobuf::int32 value) {
  
  timenow_ = value;
  // @@protoc_insertion_point(field_set:Proto.stHeartBeat_S.timenow)
}

// -------------------------------------------------------------------

// stLogin_C

// string username = 1;
inline void stLogin_C::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& stLogin_C::username() const {
  // @@protoc_insertion_point(field_get:Proto.stLogin_C.username)
  return username_.GetNoArena();
}
inline void stLogin_C::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.stLogin_C.username)
}
#if LANG_CXX11
inline void stLogin_C::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.stLogin_C.username)
}
#endif
inline void stLogin_C::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.stLogin_C.username)
}
inline void stLogin_C::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.stLogin_C.username)
}
inline ::std::string* stLogin_C::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:Proto.stLogin_C.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stLogin_C::release_username() {
  // @@protoc_insertion_point(field_release:Proto.stLogin_C.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stLogin_C::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Proto.stLogin_C.username)
}

// string password = 2;
inline void stLogin_C::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& stLogin_C::password() const {
  // @@protoc_insertion_point(field_get:Proto.stLogin_C.password)
  return password_.GetNoArena();
}
inline void stLogin_C::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.stLogin_C.password)
}
#if LANG_CXX11
inline void stLogin_C::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.stLogin_C.password)
}
#endif
inline void stLogin_C::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.stLogin_C.password)
}
inline void stLogin_C::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.stLogin_C.password)
}
inline ::std::string* stLogin_C::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Proto.stLogin_C.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stLogin_C::release_password() {
  // @@protoc_insertion_point(field_release:Proto.stLogin_C.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stLogin_C::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Proto.stLogin_C.password)
}

// -------------------------------------------------------------------

// stLogin_S

// int64 player_id = 1;
inline void stLogin_S::clear_player_id() {
  player_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 stLogin_S::player_id() const {
  // @@protoc_insertion_point(field_get:Proto.stLogin_S.player_id)
  return player_id_;
}
inline void stLogin_S::set_player_id(::google::protobuf::int64 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.stLogin_S.player_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_messageStruct_2eproto
